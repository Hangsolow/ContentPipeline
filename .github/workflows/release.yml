name: Nuget Release
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: Version

env:
  VERSION: ${{ inputs.version }}
  CURRENT_VERSION:

jobs:
  release:
    name: Create Nuget Package Release
    runs-on: ubuntu-latest
    steps:
      - name: Get current version
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getLatestRelease({ owner: context.repo.owner, repo: context.repo.repo});
            console.log(release)
            const tagName = release.data.tag_name
            if (tagName.startsWith('v')) {
              core.exportVariable('CURRENT_VERSION', tagName.substring(1))
            } else {
              core.exportVariable('CURRENT_VERSION', tagName)
            }
      - name: Find Version
        if: ${{ env.VERSION == null }}
        shell: pwsh
        run: |
          $currentVersion = "${{ env.CURRENT_VERSION }}"
          $versionObj = [System.Version]::Parse($currentVersion)
          $nextVersion = "$($versionObj.Major).$($versionObj.Minor + 1).$($versionObj.Build)"
          echo "VERSION=$nextVersion" >> $env:GITHUB_ENV
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build -c Release --no-restore -p:Version=${{ env.VERSION }} -p:SourceRevisionId=${{ github.sha }}
      - name: Test
        run: dotnet test -c Release --no-build --verbosity normal

      - name: create nuget package
        run: dotnet pack -p:Version=${{ env.VERSION }} -p:RepositoryCommit=${{ github.sha }} -c Release --output nupkgs --no-build
      - name: Create Release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs/promises');
            const nugetData = await fs.readFile('nupkgs/Hangsolow.ContentPipeline.${{ env.VERSION }}.nupkg');
            const release = await github.rest.repos.createRelease({ owner: context.repo.owner, repo: context.repo.repo, tag_name: "v${{ env.VERSION }}", generate_release_notes: true });
            console.log(release);
            await github.rest.repos.uploadReleaseAsset({ owner: context.repo.owner, repo: context.repo.repo, release_id: release.data.id, name: 'Hangsolow.ContentPipeline.${{ env.VERSION }}.nupkg', data: nugetData });
      - name: upload to nuget
        run: dotnet nuget push nupkgs/Hangsolow.ContentPipeline.${{ env.VERSION }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
